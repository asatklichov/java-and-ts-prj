#!groovy

stage 'Checkout'
    bitbucketStatusNotify ( buildState: 'INPROGRESS' )
    node {
      checkout scm
      stash excludes: 'target/', includes: '**', name: 'source'
    }

stage 'Compile'
    echo "${env.BRANCH_NAME}"
    echo "${env.BUILD_NUMBER}"
    node {
        withEnv(["PATH+MAVEN=${tool 'Maven 3'}/bin"]) {
            unstash 'source'
            sh 'mvn clean package -DskipTests'
            stash includes: 'target/classes/**, target/test-classes/**', name: 'classes'
        }
    }

stage 'Test'
    parallel 'jUnit': {
        node {
            withEnv(["PATH+MAVEN=${tool 'Maven 3'}/bin"]) {
                unstash 'classes'
                sh 'mvn surefire:test -B -Dmaven.test.failure.ignore -Dspring.profiles.active=development'
                junit '**/target/surefire-reports/TEST-*.xml'
            }
        }
    }//, 'jasmine': {
     //   node {
     //       withEnv(["PATH+MAVEN=${tool 'Maven 3'}/bin"]) {
     //           unstash 'source'
     //           sh "mvn jasmine:test"
     //           //junit '**/target/surefire-reports/TEST-*.xml'
     //       }
     //   }
     //}

stage 'QA'
    parallel 'Sonar': {
        node() {
            // requires SonarQube Scanner 2.8+
            def scannerHome = tool 'sonar-scanner';
            withSonarQubeEnv('sonar-server') {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'jenkins-bitbucket-oauth', usernameVariable: 'BB_KEY', passwordVariable: 'BB_SECRET']]) {
                    withEnv(["PATH+MAVEN=${tool 'Maven 3'}/bin"]) {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=response-now:webapp -Dsonar.projectName=\"response:now configurator\" " +
                        //sh "mvn sonar:sonar -Dsonar.projectKey=response-now:webapp -Dsonar.projectName=\"response:now configurator\" " +
                            "-Dsonar.projectVersion=1.0 -Dsonar.sources=src/main -Dsonar.sourceEncoding=UTF-8 -Dsonar.analysis.mode=issues " +
                            "-Dsonar.bitbucket.repoSlug=configurator -Dsonar.bitbucket.accountName=responsenow -Dsonar.bitbucket.branchName=${env.BRANCH_NAME} " +
                            "-Dsonar.bitbucket.oauthClientKey=${BB_KEY} " +
                            "-Dsonar.bitbucket.oauthClientSecret=${BB_SECRET} " +
                            "-X -Dsonar.verbose=true"
                    }
                }
            }
        }
    }, 'Integration Tests': {
        node() {
            echo 'Integration Tests'
        }
    }

def MAIN_BRANCH = "develop"
//Release only from develpp branch
if (env.BRANCH_NAME == MAIN_BRANCH)
{
echo "${scm.getUserRemoteConfigs()[0].getUrl()}"
    stage 'Release'
        node() {
            withEnv(["PATH+MAVEN=${tool 'Maven 3'}/bin"]) {
                echo 'Releasing'
                checkout scm
                //unstash 'source'
                //sh "git clean -f && git reset --hard origin/${MAIN_BRANCH}"
                def pom = readMavenPom file: 'pom.xml'
                def version = pom.version.replace("-SNAPSHOT", ".${currentBuild.number}")
                sh "git checkout -B release/${version}"
                sh "mvn versions:set -DnewVersion=${version} -DgenerateBackupPoms=false"
                sh "mvn clean install -DskipTests"
                sh "git commit --allow-empty -a -m \"Released version ${version}\""
                sh "git tag -f -a release_${version} -m \"Released version ${version}\""
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '258991ae-4271-4f5e-bb0f-a9ad0f79f36e', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
                    def repoUrl = scm.getUserRemoteConfigs()[0].getUrl().replace("https://", "https://${GIT_USERNAME}:${GIT_PASSWORD}@")
                    sh "git push --force ${repoUrl} release_${version}"
                }
                sh "git checkout -"
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
        }

    stage 'Deploy to STG'
        node("master") {
            def pom = readMavenPom file: 'pom.xml'
            def version = pom.version.replace("-SNAPSHOT", ".${currentBuild.number}")
            def jar_path = pwd() + "/target/responsenow-webapp-${version}.jar"
            echo jar_path
            sh "JAR_PATH=${jar_path} INVENTORY=/etc/ansible/hosts /etc/ansible/deploy_config.sh response-now staging in deploy"
        }

    stage 'Smoke test'
        node() {
            echo 'running smoke tests'
        }
}
stage 'Report Results'
    bitbucketStatusNotify ( buildState: 'SUCCESSFUL' )
